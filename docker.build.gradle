apply plugin:'groovy'
apply plugin:'org.springframework.boot'

jar {
  archiveName = project.name + '.jar'
}

dependencies {
  compile 'io.reactivex:rxjava'
  compile 'org.springframework.cloud:spring-cloud-starter-consul-all'
  compile 'org.springframework.cloud:spring-cloud-security'
  compile 'org.springframework.cloud:spring-cloud-starter-zuul'
  compile 'org.springframework.cloud:spring-cloud-starter-feign'

  compile 'ch.qos.logback:logback-classic'

  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.security.oauth:spring-security-oauth2'

  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-actuator-docs'
  compile 'com.nimbusds:nimbus-jose-jwt'

  testCompile 'org.testcontainers:testcontainers'
}

ext {
  imageTagLatest = project.hasProperty('imageTagLatest')
  imageTag = "${imageTagLatest ? 'latest' : project.version.toString().replace('+','.')}"
  imageFullName = "private_registry/gateway:$imageTag"
  dockerRegistryName = (project.hasProperty('DOCKER_REPOSITORY') ? project.findProperty('DOCKER_REPOSITORY') : System.getenv()['DOCKER_REPOSITORY'])
  dockerRegistryUsername = (project.hasProperty('DOCKER_USERNAME') ? project.findProperty('DOCKER_USERNAME') : System.getenv()['DOCKER_USERNAME'])
  dockerRegistryPassword = (project.hasProperty('DOCKER_PASSWORD') ? project.findProperty('DOCKER_PASSWORD') : System.getenv()['DOCKER_PASSWORD'])
  dockerRegistryUrl = (project.hasProperty('DOCKER_URL') ? project.findProperty('DOCKER_URL') : System.getenv()['DOCKER_URL'])
  dockerRegistryUrlDefault = 'https://index.docker.io/v1'
//  imageName = "${dockerRegistryName ? dockerRegistryName + '/' : ''}gateway"
  imageName = "private_registry/gateway"
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

docker {
  url = "unix:///var/run/docker.sock"
  registryCredentials {
    url = dockerRegistryUrl ? dockerRegistryUrl : dockerRegistryUrlDefault
    username = dockerRegistryUsername
    password = dockerRegistryPassword
  }
}

//docker
task createDockerfile(type: Dockerfile) {
  destFile = project.file('build/docker/Dockerfile')
  from 'java:8-alpine'
  maintainer 'Serdyuk Sergey itneee@gmail.com"'
  volume '/tmp'
  jar.outputs.files.filter { it.name.endsWith '.jar' } each {
    addFile it.name, "/$it.name"
  }
  exposePort 8585
  entryPoint 'java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/gateway.jar', '--spring.profiles.active=local'
}

task copyJars(type: Copy){
  from(jar.outputs.files)
  into('build/docker/')
}

task buildImage(type: DockerBuildImage) {
  dependsOn build, copyJars, createDockerfile
  inputDir = createDockerfile.destFile.parentFile
  tag = imageFullName
}

task tagDocker(type: DockerTagImage) {
  dependsOn buildImage
  force = true
  repository = imageName
  targetImageId { buildImage.imageId }
  conventionMapping.tag = { imageTag as String }
}

task pushImage(type: DockerPushImage) {
  dependsOn tagDocker
  conventionMapping.imageName = { tagDocker.getRepository() }
  conventionMapping.tag = { tagDocker.getTag() }
}
